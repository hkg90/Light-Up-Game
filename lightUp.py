import PySimpleGUI as sg
import random
import sys

# Reference light bulb .png file: https://iconarchive.com/search?q=lightbulb

# Light Up Game GUI

font = 'Arial 16 bold'
# width and height of board, 7x7 grid
width = 7
height = 7
blankBlackBox = []
numberedBlackBox = []
restart = True
size = (30, 30)
# PNG images graphic's Base64 byte string
lightBulbIcon = b'iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAAGXRFWHRTb2Z0d2FyZQBBZG9iZSBJbWFnZVJlYWR5ccllPAAAAidJREFUeNp0U89rE0EU/ja7kZRWQwOS2sRgEayiRFGp9JBL/oN4EbyJtSG3eFFEpEUvHiMUpPXoteCPP8CbF1FQY6vWom2zCdt00yZx0242u7O+nbVl3awP3sybN9/73puZN4Jt2/DLm9lwjqZp0om/rnekC9nZ3gs/VvASUGCCpvupKzcK8XQOA9Ek9+utKpTyK8jvn88zs/uIiKr7MZKXLSRFHpzNPcnHTpyHbW7D7v3i/sjQAMYyUxgey+SXX94WyXXrIMaT/fqx9NX8cGIUbPcTbKMCmCpXx3Z80XgMI+nclIPtIyApjJyZgLX7GaynBqqzFz91kWODCC6IwjcquwFx6DJsq032lquWBnHwErdFfOXYIALL6qzA2vuJnroI6XCG7kGj4A4RTnKfpVdgapzACrrED53tZvbIUZOYmmDKM0SOz1CKCPS1u7DZb9AAraHtP2tfBU/lpXUwy6KsJpjRoHPX+ZFYb8f10V51eYNj+wjobRc1tTEnl9d4JledHrEP1vKXdWiqOudtKMnXWHeU1aoYkoTC6OmkG+yMFKys1KD8kJ3M9/7pHe+CmPdoeri5uulmhVsBM03UvtccyGPCaN4YfwV4O/5RidVfw6iP4+RgEnV1C+Wla6jokyx87uZG1ocPIUBCUhSxaII+ShhhegXTOIR2hwVjg5yGYaDVanN7p9lEt6vjfyIEfWdHisXivKIo0w5ZKpVaKJVK+SDcHwEGAD5qJSG2+HXsAAAAAElFTkSuQmCC'
blkBlank = b'iVBORw0KGgoAAAANSUhEUgAAAQAAAAEACAYAAABccqhmAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsQAAA7EAZUrDhsAAAMfSURBVHhe7dRBDcAwAAOxdPw5b32MxdlSFAZ3tr13QNDzPxAkABAmABAmABAmABAmABAmABAmABAmABAmABAmABAmABAmABAmABAmABAmABAmABAmABAmABAmABAmABAmABAmABAmABAmABAmABAmABAmABAmABAmABAmABAmABAmABAmABAmABAmABAmABAmABAmABAmABAmABAmABAmABAmABAmABAmABAmABAmABAmABAmABAmABAmABAmABAmABAmABAmABAmABAmABAmABAmABAmABAmABAmABAmABAmABAmABAmABAmABAmABAmABAmABAmABAmABAmABAmABAmABAmABAmABAmABAmABAmABAmABAmABAmABAmABAmABAmABAmABAmABAmABAmABAmABAmABAmABAmABAmABAmABAmABAmABAmABAmABAmABAmABAmABAmABAmABAmABAmABAmABAmABAmABAmABAmABAmABAmABAmABAmABAmABAmABAmABAmABAmABAmABAmABAmABAmABAmABAmABAmABAmABAmABAmABAmABAmABAmABAmABAmABAmABAmABAmABAmABAmABAmABAmABAmABAmABAmABAmABAmABAmABAmABAmABAmABAmABAmABAmABAmABAmABAmABAmABAmABAmABAmABAmABAmABAmABAmABAmABAmABAmABAmABAmABAmABAmABAmABAmABAmABAmABAmABAmABAmABAmABAmABAmABAmABAmABAmABAmABAmABAmABAmABAmABAmABAmABAmABAmABAmABAmABAmABAmABAmABAmABAmABAmABAmABAmABAmABAmABAmABAmABAmABAmABAmABAmABAmABAmABAmABAmABAmABAmABAmABAmABAmABAmABAmABAmABAmABAmABAmABAmABAmABAmABAmABAmABAmABAmABAmABAmABAmABAmABAmABAmABAmABAmABAmABAmABAmABAmABAmABAmABAmABAmABAmABAmABAmAJC1fXQiAv+ZHjkTAAAAAElFTkSuQmCC'
blkZero = b'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'
blkOne = b'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'
blkTwo = b'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'
blkThree = b'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'
blkFour = b'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'

# 0: white space, 1: light bulb image, 2: black box, 3: lit up (yellow space)

image = ['', lightBulbIcon, '', blkBlank, blkZero, blkOne, blkTwo, blkThree,
         blkFour]
color = [('grey', 'white'), ('grey', 'white'), ('grey', 'yellow'), ('grey',
        'black'),('grey', 'black'), ('grey','black'), ('grey','black')  ]



# Setting for menu buttons
def menu_buttons(text, key=None, disabled=False, button_color=('grey',
                                                               'blue')):
    return sg.Button(text, pad=(10, 10), font=font, focus=False,
                     key=key, disabled=disabled, button_color=button_color)

# Create button for each grid in board game
def grid_button(x, y):
    board[x][y] = button(x, y)
    return board[x][y].button

def load_black_boxes():
    # Open file
    new_file = open('gameboards/board1.txt', 'r')
    num_blank = int(new_file.readline())
    for i in range(num_blank):
        blank = new_file.readline()
        if '\n' in blank:
            blank = blank.strip()
        divided = list(map(int, blank.split(',')))

        blankBlackBox.append(divided)

    num_numbered = int(new_file.readline())
    for i in range(num_numbered):
        num_box = new_file.readline()
        if '\n' in num_box:
            num_box = num_box.strip()
        divided = list(map(int, num_box.split(',')))

        numberedBlackBox.append(divided)

    # Assign blank black background cells
    for cell in blankBlackBox:
        row = cell[0] - 1
        col = cell[1] - 1
        new_state = 2
        board[row][col].assign_cell(new_state, ' ')

    # Assign numbered black background cells
    for cell in numberedBlackBox:
        row = cell[0] - 1
        col = cell[1] - 1
        new_state = 2
        cell_text = 'helooooooooooooooooooooooooo'
        board[row][col].assign_cell(new_state, cell_text)




# Class for game board's button objects
class button():

    def __init__(self, x, y):
        self.x          = x
        self.y          = y
        self.state      = 0
        self.color      = color[self.state]
        self.disabled   = False
        self.key        = (x, y)             # keys can be ANYTHING,
        # not just strings
        self.num        = 0
        self.button     = sg.Button('hi',
            auto_size_button=False,
            border_width=2,
            button_color=self.color,
            disabled=self.disabled,
            focus=False,
            font=font,
            image_size=size,
            image_data=image[self.state],
            key=self.key,
            pad=(1,1))

    def assign_cell(self, state, cell_text):
        self.state = state
        # Update cell to light bulb or 'beam' status
        if state in [1, 3]:
            text = cell_text
        # Update cell to black background with inside cell text ('' or number)
        elif state == 2:
            self.disabled = True
            self.num = cell_text
            text = str(2)
        # # Update cell to 'beam' color
        # elif state == 3:
        #     text = ' '
        # Update
        self.color = color[self.state]
        window[self.key].Widget['disabledforeground'] = 'white'
        window.finalize()
        self.button.Update(text='bye', disabled=self.disabled,
                           image_data=image[self.state], image_size=size,
                           button_color=self.color)


# Initialize board theme and grid size
sg.change_look_and_feel('DarkBlue')
board = [[0 for j in range(height)] for i in range(width)]


# Create layout of window
layout = [[menu_buttons('Reset Board', key='-New Game-'), menu_buttons(
    'Solve', key='-Solve Game-'), menu_buttons(
    'Check: Did I win?', key='-Solve Game-'),]]+[[grid_button(x, y) for x in range(
    width)] for y in range(height)]

# Create window to display game board
window = sg.Window('Light Up', layout=layout, finalize=True)

# Read input game board file for game board's black boxes and respective
# positions in board
load_black_boxes()


# Main code to run the game
while True:
    event, values = window.read()